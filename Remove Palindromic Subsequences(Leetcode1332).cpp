/*You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

 */



class Solution {
public:
    int removePalindromeSub(string s) {
        int cnt=0;
        int i=0,j=s.size()-1;
        bool ispalindrome=true;
        while(i<j)
        {
            if(s[i]!=s[j])
            {
                ispalindrome=false;
                break;
            }
            i++;
            j--;
            
        }
        if(ispalindrome)
            return 1;
        int a[2]={0,0};
        for(int i=0;i<s.size();i++)
        {
            a[s[i]-'a']++;
            
        }
        if(a[0]!=0&&a[1]!=0)
            return 2;
        return 1;
    }
};
